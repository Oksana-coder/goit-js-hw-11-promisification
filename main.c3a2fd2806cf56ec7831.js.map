{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","time","Promise","resolve","setTimeout","logger","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,IAAMC,EAAOD,EAEb,OAAO,IAAIE,SAAQ,SAACC,GAChBC,YAAW,WACPD,EAAQF,KACTD,OAKLK,EAAS,SAAAJ,GAAI,OAAIK,QAAQC,IAAR,kBAA8BN,EAA9B,OAGvBF,EAAM,KAAMS,KAAKH,GACjBN,EAAM,KAAMS,KAAKH,GACjBN,EAAM,MAAMS,KAAKH,G,kCChBXI,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAInBC,EAAkB,SAACC,EAAUC,GAC/B,OAAOZ,QAAQC,QAAQU,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,OAI/DX,EAAS,SAAAY,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKH,GACrCO,EAAgBH,EAAO,OAAOD,KAAKH,GCjBnC,IAIMc,EAAkB,SAACC,GACrB,IAL+BC,EAAKC,EAK9BvB,GALyBsB,EAKS,IALJC,EAKS,IAJxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlD,OAAO,IAAInB,SAAQ,SAACC,EAASuB,GACzB,IAAMC,EAAaJ,KAAKE,SAAW,GAEnCrB,YAAW,WACHuB,GACAxB,EAAQ,CAACiB,EAAYQ,GAAI7B,IAE7B2B,EAAON,EAAYQ,MACpB7B,OAIL8B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAV3B,EAAU,KACjCK,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8C3B,EAA9C,OAGI6B,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.c3a2fd2806cf56ec7831.js","sourcesContent":["const delay = ms => {\n    const time = ms;\n\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(time);\n        }, ms);\n\n    });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n\nconst toggleUserState = (allUsers, userName) => {\n    return Promise.resolve(allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n    ));\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        const canProcess = Math.random() > 0.3;\n\n        setTimeout(() => {\n            if (canProcess) {\n                resolve([transaction.id, delay]);\n            }\n            reject(transaction.id);\n        }, delay);\n    });\n};\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}